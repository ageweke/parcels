describe "Parcels alongside files", :type => :system do
  context "with a very simple alongside file" do
    before :each do
      files {
        file 'assets/basic.css', %{
          //= require_parcels
        }

        widget('views/my_widget') { }
        file   'views/my_widget.css', %{
          p { color: red; }
        }
      }
    end

    it "should apply the correct autogenerated class to the widget" do
      doc = rendered_widget_content('views/my_widget')
      expect_wrapper_classes(doc, 'p', 'views/my_widget')
    end

    it "should aggregate the contents of that file" do
      expect_css_content_in('basic',
        'views/my_widget.css' => {
          widget_scoped(:p) => "color: red"
        })
    end
  end

  it "should not allow you to pick up the alongside file with a direct 'require'" do
    files {
      file 'assets/basic.css', %{
        //= require_parcels
      }

      file 'assets/one.css', %{
        //= require 'views/my_widget.css'
      }

      widget('views/my_widget') { }
      file   'views/my_widget.css', %{
        p { color: red; }
      }
    }

    expect { css_content_in('one') }.to raise_error(::Sprockets::FileNotFound, %r{views/my_widget\.css}i)
  end

  it "should allow you to pick up the alongside file with a 'require' using '_parcels/'" do
    files {
      file 'assets/basic.css', %{
        //= require_parcels
      }

      file 'assets/one.css', %{
        //= require '_parcels/my_widget.css'
      }

      widget('views/my_widget') { }
      file   'views/my_widget.css', %{
        p { color: red; }
      }
    }

    expect_css_content_in('one',
      :head => {
        :p => 'color: red'
      })
  end
end
